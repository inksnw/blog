<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rusts on </title>
    <link>http://inksnw.asuscomm.com:3001/rust/</link>
    <description>Recent content in Rusts on </description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 29 Nov 2022 11:51:30 +0800</lastBuildDate>
    <atom:link href="http://inksnw.asuscomm.com:3001/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>15.作用域规则</title>
      <link>http://inksnw.asuscomm.com:3001/rust/15.%E4%BD%9C%E7%94%A8%E5%9F%9F%E8%A7%84%E5%88%99/</link>
      <pubDate>Fri, 07 Oct 2022 22:01:48 +0800</pubDate>
      <guid>http://inksnw.asuscomm.com:3001/rust/15.%E4%BD%9C%E7%94%A8%E5%9F%9F%E8%A7%84%E5%88%99/</guid>
      <description>手敲一遍 通过例子学Rust 作用域在所有权（ownership）、借用（borrow）和生命周期（lifetime）中起着重要作用。也就是说，</description>
    </item>
    <item>
      <title>14.泛型</title>
      <link>http://inksnw.asuscomm.com:3001/rust/14.%E6%B3%9B%E5%9E%8B/</link>
      <pubDate>Thu, 06 Oct 2022 17:12:49 +0800</pubDate>
      <guid>http://inksnw.asuscomm.com:3001/rust/14.%E6%B3%9B%E5%9E%8B/</guid>
      <description>手敲一遍 通过例子学Rust 函数 泛型（generic）是关于泛化类型和函数功能，以扩大其适用范围的话题。泛型极大地 减少了代码的重复，但它自身的</description>
    </item>
    <item>
      <title>13.属性</title>
      <link>http://inksnw.asuscomm.com:3001/rust/13.%E5%B1%9E%E6%80%A7/</link>
      <pubDate>Thu, 06 Oct 2022 17:05:02 +0800</pubDate>
      <guid>http://inksnw.asuscomm.com:3001/rust/13.%E5%B1%9E%E6%80%A7/</guid>
      <description>手敲一遍 通过例子学Rust 属性 属性是应用于某些模块、crate 或项的元数据（metadata）。这元数据可以用来： 条件编译代码 设置 crate 名称、版</description>
    </item>
    <item>
      <title>12.cargo</title>
      <link>http://inksnw.asuscomm.com:3001/rust/12.cargo/</link>
      <pubDate>Thu, 06 Oct 2022 12:46:57 +0800</pubDate>
      <guid>http://inksnw.asuscomm.com:3001/rust/12.cargo/</guid>
      <description>手敲一遍 通过例子学Rust 依赖 大多数程序都会依赖于某些库。如果你曾经手动管理过库依赖，那么你就知道这会带来的极大的痛苦。幸运的是，Rust 的</description>
    </item>
    <item>
      <title>11.crate</title>
      <link>http://inksnw.asuscomm.com:3001/rust/11.crate/</link>
      <pubDate>Sun, 02 Oct 2022 22:07:11 +0800</pubDate>
      <guid>http://inksnw.asuscomm.com:3001/rust/11.crate/</guid>
      <description>手敲一遍 通过例子学Rust Crate crate（中文有 “包，包装箱” 之意）是 Rust 的编译单元。当调用 rustc some_file.rs 时，some_file.rs 被当作 crate 文件。如果 some_file.rs</description>
    </item>
    <item>
      <title>10.模块</title>
      <link>http://inksnw.asuscomm.com:3001/rust/10.%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Sun, 02 Oct 2022 20:34:37 +0800</pubDate>
      <guid>http://inksnw.asuscomm.com:3001/rust/10.%E6%A8%A1%E5%9D%97/</guid>
      <description>手敲一遍 通过例子学Rust 模块 Rust 提供了一套强大的模块（module）系统，可以将代码按层次分成多个逻辑 单元（模块），并管理这些模块之间的可见</description>
    </item>
    <item>
      <title>9.函数</title>
      <link>http://inksnw.asuscomm.com:3001/rust/9.%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sun, 02 Oct 2022 17:19:01 +0800</pubDate>
      <guid>http://inksnw.asuscomm.com:3001/rust/9.%E5%87%BD%E6%95%B0/</guid>
      <description>手敲一遍 通过例子学Rust 函数（function）使用 fn 关键字来声明。函数的参数需要标注类型，就和变量一样，如果函数返回一个值，返回类型必须</description>
    </item>
    <item>
      <title>8.流程控制</title>
      <link>http://inksnw.asuscomm.com:3001/rust/8.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Thu, 29 Sep 2022 01:02:22 +0800</pubDate>
      <guid>http://inksnw.asuscomm.com:3001/rust/8.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</guid>
      <description>手敲一遍 通过例子学Rust if/else if-else分支判断和其它语言类似.不同的是,Rust语言中的布尔判断不必使用小括号包裹,且每个条件后面都跟着</description>
    </item>
    <item>
      <title>7.表达式</title>
      <link>http://inksnw.asuscomm.com:3001/rust/7.%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Thu, 29 Sep 2022 00:52:09 +0800</pubDate>
      <guid>http://inksnw.asuscomm.com:3001/rust/7.%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>手敲一遍 通过例子学Rust Rust 程序（大部分）由一系列语句构成： 1 2 3 4 5 fn main() { // 语句 // 语句 // 语句 } Rust 有多种语句。最普遍的语句类型有两种：一种是</description>
    </item>
    <item>
      <title>6.类型转换</title>
      <link>http://inksnw.asuscomm.com:3001/rust/6.%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Wed, 28 Sep 2022 20:22:07 +0800</pubDate>
      <guid>http://inksnw.asuscomm.com:3001/rust/6.%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</guid>
      <description>手敲一遍 通过例子学Rust 类型转换 Rust使用trait解决类型之间的转换问题.一般的转换会用到From和Into两个trait.不过,即便</description>
    </item>
    <item>
      <title>5.类型系统</title>
      <link>http://inksnw.asuscomm.com:3001/rust/5.%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Thu, 22 Sep 2022 23:29:19 +0800</pubDate>
      <guid>http://inksnw.asuscomm.com:3001/rust/5.%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/</guid>
      <description>手敲一遍 通过例子学Rust Rust 提供了多种机制，用于改变或定义原生类型和用户定义类型。接下来会讲到： 原生类型的类型转换 (cast) 指定字面量的类型 使用类型</description>
    </item>
    <item>
      <title>4.变量绑定</title>
      <link>http://inksnw.asuscomm.com:3001/rust/4.%E5%8F%98%E9%87%8F%E7%BB%91%E5%AE%9A/</link>
      <pubDate>Thu, 22 Sep 2022 10:43:25 +0800</pubDate>
      <guid>http://inksnw.asuscomm.com:3001/rust/4.%E5%8F%98%E9%87%8F%E7%BB%91%E5%AE%9A/</guid>
      <description>手敲一遍 通过例子学Rust Rust 通过静态类型确保类型安全。变量绑定可以在声明时说明类型，不过在多数情况下， 编译器能够从上下文推导出变量的类型，从</description>
    </item>
    <item>
      <title>3.自定义类型</title>
      <link>http://inksnw.asuscomm.com:3001/rust/3.%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Wed, 21 Sep 2022 23:23:20 +0800</pubDate>
      <guid>http://inksnw.asuscomm.com:3001/rust/3.%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B/</guid>
      <description>手敲一遍 通过例子学Rust Rust自定义数据类型主要通过下面两个关键字创建: struct: 定义一个结构体 enum: 定义一个枚举类型 而常量 (constant) 可以通过 const 和stati</description>
    </item>
    <item>
      <title>2.原生类型</title>
      <link>http://inksnw.asuscomm.com:3001/rust/2.%E5%8E%9F%E7%94%9F%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Wed, 21 Sep 2022 21:27:12 +0800</pubDate>
      <guid>http://inksnw.asuscomm.com:3001/rust/2.%E5%8E%9F%E7%94%9F%E7%B1%BB%E5%9E%8B/</guid>
      <description>手敲一遍 通过例子学Rust 字面量和运算符 整数1,浮点数1.2,字符a,字符串abc,布尔值true和单元类型()可以用数字,文字或符号之类的</description>
    </item>
    <item>
      <title>1.Hello World</title>
      <link>http://inksnw.asuscomm.com:3001/rust/1.hello-world/</link>
      <pubDate>Tue, 20 Sep 2022 22:01:13 +0800</pubDate>
      <guid>http://inksnw.asuscomm.com:3001/rust/1.hello-world/</guid>
      <description>手敲一遍 通过例子学Rust 格式化输出 调试(Debug) 所有的类型,若想使用 std::fmt 的格式化打印,都要求实现至少一个可打印的traits.仅有一些类</description>
    </item>
    <item>
      <title>Rust学习:包与泛型</title>
      <link>http://inksnw.asuscomm.com:3001/rust/rust%E5%AD%A6%E4%B9%A0%E5%8C%85%E4%B8%8E%E6%B3%9B%E5%9E%8B/</link>
      <pubDate>Fri, 09 Sep 2022 15:39:58 +0800</pubDate>
      <guid>http://inksnw.asuscomm.com:3001/rust/rust%E5%AD%A6%E4%B9%A0%E5%8C%85%E4%B8%8E%E6%B3%9B%E5%9E%8B/</guid>
      <description>包、Crate和模块 rust的模块系统包括: 包: cargo的一个功能，它允许你构建、测试、分享crate。一个包可以包含多个二进制crate</description>
    </item>
    <item>
      <title>Rust学习:所有权与结构体</title>
      <link>http://inksnw.asuscomm.com:3001/rust/rust%E5%AD%A6%E4%B9%A0%E6%89%80%E6%9C%89%E6%9D%83%E4%B8%8E%E7%BB%93%E6%9E%84%E4%BD%93/</link>
      <pubDate>Fri, 09 Sep 2022 00:12:03 +0800</pubDate>
      <guid>http://inksnw.asuscomm.com:3001/rust/rust%E5%AD%A6%E4%B9%A0%E6%89%80%E6%9C%89%E6%9D%83%E4%B8%8E%E7%BB%93%E6%9E%84%E4%BD%93/</guid>
      <description>所有权 栈与堆 栈和堆都是代码在运行时可供使用的内存，但是它们的结构不同。栈以放入值的顺序存储值并以相反顺序取出值。这也被称作 后进先出（last</description>
    </item>
  </channel>
</rss>
