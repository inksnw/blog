<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rust on </title>
    <link>http://inksnw.asuscomm.com:3001/tags/rust/</link>
    <description>Recent content in rust on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 22 Sep 2022 10:43:25 +0800</lastBuildDate><atom:link href="http://inksnw.asuscomm.com:3001/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>变量绑定</title>
      <link>http://inksnw.asuscomm.com:3001/post/4.%E5%8F%98%E9%87%8F%E7%BB%91%E5%AE%9A/</link>
      <pubDate>Thu, 22 Sep 2022 10:43:25 +0800</pubDate>
      
      <guid>http://inksnw.asuscomm.com:3001/post/4.%E5%8F%98%E9%87%8F%E7%BB%91%E5%AE%9A/</guid>
      <description>Rust 通过静态类型确保类型安全。变量绑定可以在声明时说明类型，不过在多数情况下， 编译器能够从上下文推导出变量的类型，从而大大减少了类型说明的工作</description>
    </item>
    
    <item>
      <title>3.自定义类型</title>
      <link>http://inksnw.asuscomm.com:3001/post/3.%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Wed, 21 Sep 2022 23:23:20 +0800</pubDate>
      
      <guid>http://inksnw.asuscomm.com:3001/post/3.%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B/</guid>
      <description>手敲一遍 通过例子学Rust Rust自定义数据类型主要通过下面两个关键字创建: struct: 定义一个结构体 enum: 定义一个枚举类型 而常量 (constant) 可以通过 const 和stati</description>
    </item>
    
    <item>
      <title>2.原生类型</title>
      <link>http://inksnw.asuscomm.com:3001/post/2.%E5%8E%9F%E7%94%9F%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Wed, 21 Sep 2022 21:27:12 +0800</pubDate>
      
      <guid>http://inksnw.asuscomm.com:3001/post/2.%E5%8E%9F%E7%94%9F%E7%B1%BB%E5%9E%8B/</guid>
      <description>手敲一遍 通过例子学Rust 字面量和运算符 整数1,浮点数1.2,字符a,字符串abc,布尔值true和单元类型()可以用数字,文字或符号之类的</description>
    </item>
    
    <item>
      <title>1.Hello World</title>
      <link>http://inksnw.asuscomm.com:3001/post/1.hello-world/</link>
      <pubDate>Tue, 20 Sep 2022 22:01:13 +0800</pubDate>
      
      <guid>http://inksnw.asuscomm.com:3001/post/1.hello-world/</guid>
      <description>手敲一遍 通过例子学Rust 格式化输出 调试(Debug) 所有的类型,若想使用 std::fmt 的格式化打印,都要求实现至少一个可打印的traits.仅有一些类</description>
    </item>
    
    <item>
      <title>Rust学习:包与泛型</title>
      <link>http://inksnw.asuscomm.com:3001/post/rust%E5%AD%A6%E4%B9%A0%E5%8C%85%E4%B8%8E%E6%B3%9B%E5%9E%8B/</link>
      <pubDate>Fri, 09 Sep 2022 15:39:58 +0800</pubDate>
      
      <guid>http://inksnw.asuscomm.com:3001/post/rust%E5%AD%A6%E4%B9%A0%E5%8C%85%E4%B8%8E%E6%B3%9B%E5%9E%8B/</guid>
      <description>包、Crate和模块 rust的模块系统包括: 包: cargo的一个功能，它允许你构建、测试、分享crate。一个包可以包含多个二进制crate</description>
    </item>
    
    <item>
      <title>Rust学习:所有权与结构体</title>
      <link>http://inksnw.asuscomm.com:3001/post/rust%E5%AD%A6%E4%B9%A0%E6%89%80%E6%9C%89%E6%9D%83%E4%B8%8E%E7%BB%93%E6%9E%84%E4%BD%93/</link>
      <pubDate>Fri, 09 Sep 2022 00:12:03 +0800</pubDate>
      
      <guid>http://inksnw.asuscomm.com:3001/post/rust%E5%AD%A6%E4%B9%A0%E6%89%80%E6%9C%89%E6%9D%83%E4%B8%8E%E7%BB%93%E6%9E%84%E4%BD%93/</guid>
      <description>所有权 栈与堆 栈和堆都是代码在运行时可供使用的内存，但是它们的结构不同。栈以放入值的顺序存储值并以相反顺序取出值。这也被称作 后进先出（last</description>
    </item>
    
  </channel>
</rss>
